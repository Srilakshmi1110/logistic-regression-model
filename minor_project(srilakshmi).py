# -*- coding: utf-8 -*-
"""minor-project(srilakshmi).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14C_Acjc69lUwJAx4ZxwjH_28pBufUnDl

Problem Statement:
* ConnectSphere Digital spends too much money showing ads who do not click on them.
* We need a  model so that we predict whether a user is likely to click on an advertisement,this will help us reduce wasted ad space and improve ROI(return on investment)

1.Import all important Libraries and Modules
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_curve, roc_auc_score

"""2.Load the csv file"""

df = pd.read_csv("advertising.csv")

"""3. Drop the columns which are not required"""

df = df.drop(["Ad Topic Line", "City", "Country"], axis=1)

"""4. Convert Timestamp to useful features"""

df['Timestamp'] = pd.to_datetime(df['Timestamp'])
df['Hour'] = df['Timestamp'].dt.hour
df['DayOfWeek'] = df['Timestamp'].dt.dayofweek
df = df.drop("Timestamp", axis=1)

"""5. Features (X) and target (y)"""

X = df.drop("Clicked on Ad", axis=1)
y = df["Clicked on Ad"]

"""
6. Split into train and test"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""7. Scale features"""

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

"""8. Train Logistic Regression model(LRM)

"""

model = LogisticRegression()
model.fit(X_train, y_train)

"""9. Predictions"""

y_pred = model.predict(X_test)
y_prob = model.predict_proba(X_test)[:, 1]

"""10. Evaluate the model"""

print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

"""11. Confusion matrix"""

cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.title("Confusion Matrix")
plt.show()

"""12. ROC CURVE (used for evaluation of classification model )"""

fpr, tpr, _ = roc_curve(y_test, y_prob)
plt.plot(fpr, tpr, label="ROC Curve")
plt.plot([0,1],[0,1],'--')
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("ROC Curve")
plt.legend()
plt.show()

"""13. Display the importance"""

coefficients = pd.DataFrame({
    "Feature": X.columns,
    "Coefficient": model.coef_[0]}).sort_values(by="Coefficient", ascending=False)

print("\nFeature Importance:")
print(coefficients)

"""14. Show the predictions"""

print("\nSample Predictions:")
print(y_pred[:10])